#+title: Remote OS
#+author: Thomas Binetruy
#+date: Febuary 13th, 2018

* Introduction 
I was recently confronted to having the problem of needing to switch computers multiple times a day for logistical reasons not worth discussing any further. This blog post will describe various ways to achieve reproduction of work environment on multiple machines.

Say you are the CTO of a VR startup that broke his computer. You could buy another one, set it up and be done, or you could have fun and see how you can run seamlessly your linux work station from both VR computer that need to be accessible at all times. I develop on linux, I find it easier for some reason. But for video card driver reasons, Windows is where you really harness the true graphic power needed for VR. So I was confronted to the problem of having to run a single environment in Linux on windows computer that couldn't be rebooted all day long.

* The specs
I need to be able to run:
1. an Archlinux based distribution. I've been using this distro for a few years (since '09 after I gave up trying to install Gentoo ^^) and really like it.
2. accessible from 2 workstations
3. at anytime with internet
4. have access to windows to run VR at anytime
5. have the same workstation configuration on both computer at all times
6. usable workspace (no lag)

Spec 4. alone renders dual booting an archlinux partition on both laptops impossible.

* The solutions
** SSHing into a sever from both windows machines
Setting up a server is tough. But services like Digital Ocean make it affordable to have something pretty cool. Unfortunately, Digital Ocean doesn't offer Archlinux anymore, so I setup an Ubuntu, spec 1 is missed.

Installing Putty on both Windows machines allow me to connect to the server from windows. I now have access to the same computer from both windows machines over the wire. I can be on one computer, and the next second on the other and have access to the same computer. Emacs -nw give me a more powerful tmux on top of that inside Putty, the dream.

That's all pretty sweet, but developing over SSH is unfortunately never ideal. You're confronted to latency problems and connection drops. And there is nothing more infuriating than waiting longer than necessary for you editor to catch up with your keyboard.

So how did we do on the spec ?
1. miss
2. yes
3. yes
4. yes
5. yes
6. miss

*** SSHing from emacs on both windows
The better way to edit remote files with emacs is to run it natively and ssh from emacs. The lag disappears. In my case however, that implied keeping 2 windows comfigurations of emacs in sync. Not ideal, but very doable (we'll investigate some of the ways later in this article).

** Virtual machines
Luckily, we're a VR startup, so virtual machines are a possibility. Setting up an Arch image would allow me to boot onto Linux from the Windows machines without requiring a reboot. Performance is affected, but gamer computers are strong and it's worth a try. Once installing VirtualBox on both Windows computers, it's just a matter of keeping the images in sync. Note that the images could be as much as 50 gig. This image would be my actual computer.

Obviously one has to be careful syncing this way. I recommend to never have both VirtualBox opened to make sure that there is never any write order race condition between the 2 computers.

*** Keeping the images in sync
**** RSync
RSync is a utility that allows to sync to remote repositories over the wire. So I can keep a folder in sync from two different computers. On a local area network, that's pretty fast. What's interesting is that RSync is efficient in the way it keeps the folders in sync. When I install a package on my Archlinux and save the image, I wouldn't want to have to re-sync the entire image. RSync is smart and does a binary diff in order to sync only the difference in byte between on folders to be kept in sync.

**** Dropbox
Dropbox allows for the same thing as RSync, with binary diff as well, but over the cloud. Latency is hurt because when switching computers, computer A saves the image, uplaods the diff to Dropbox, computer B then gets notified before finally downloading the diff and merging it. 

* Conclusion
There is a multitude of ways that allow to keep 2 workstations in sync, each with its own set of catches. I found that keeping my image over Dropbox gave me a good enough deal. Although syncing time can take a small while. I will try to switch to rsync between the 2 Windows machines. But I can't really bare using Windows anymore, it's too different from what I expect a computer to do...

* Worth mentioning
** SSHFS
You can mount a remote folder as a partition using SSHFS. The problem however being that you download every file every time you open it. SSHFS has a cache but for development with npm and pip, it's not ideal since folders can have so many files, read access needs to be fast which it is not with SSHFS.


** VNC
I'd rather use VMs, which I do. Much better performance.
