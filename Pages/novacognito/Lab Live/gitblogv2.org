 f bnrFor anyone who collaborates: on work "GIT".

This is the first of set of cliff notes on my learnings of power-house versioning tool /git/.

Rocket scientist and a dear friend of mine, Motas, is my teacher.   The first required reading is Git Pro, the second addition. I'm not that smart of a guy, so my success is a testiment to the prospect of anyone's.

Git is a good tool because it is easy to use, adoptable, and intuitive.  Simply, git is a distributed repository.   


Git is a versioning control system (VCS), as in it records changes of files, allows you to revert to a previous state, compares changes over time and identifies modifiers.   

You might be familiar with rcs (I wasn't), which is a popular local VCS tool.   It can recreate what your files look like, at any time, by adding up all the patches.

Git is more powerful.

Single server versioning control systems provide advatangaes over local versioning control systems, like 
(1) Collaborating developers know what others are working on (for the most part)
(2) Granular admin controls
(3) centralized work for admin

Disadvantaged to a local versioning system is 
(1) single point of failure
(2) hard disk corruption risk.   

Git came about after disageement with Bitkeeper, the proprietery DVCS that stopped agreeing with the Linux Kernal open source software project.  Linus Torvalds, creator of Linux, lead the way to a new system founded on the following principles. 
 - speed
 - simple design
 - strong support for non-linear development
 - fully distributed
 - can handle large projects

Suew enough, git is incredibly fast, efficient with large scale prjects, and has a magnificent branching ssytem for non-linear development.  

Here are the basics


* Git basics

As they say, forget what you know.  Git is different.   Git stores modified files and links to the non-modified files from before.  It takes a stream of snapshots.  Thnk of Git as a mini filing system copied from the previous generation.   

Most o the operations are local.   The entire history of the project included.   This enables you to work offline easily.   Make you commit, and when you reconnect to the network it will be pushed to your branch.   

Git has integrity.  First and foremost, understand you /can't lose anything/.  Everything is check summed before stored, then reffered by checksum.   It impossible to make a change without directory knowing about it.  

Again, you cant lose information. This is a key feature.

A SHA-1 hash, a 40-character string of hexadecimal characters (0-9 and a-f) is calculated based on the file contents.  

We will wrap up with the three states in which your files can be:

"commited" which means the data is saved and stored on the local database.

"modified" which means a file was changed but not commited

"staged" which means a file is prepared for the next commit.

Understand these last three and you've all you need to know to get started.  

Tune in next time...

-Zef
